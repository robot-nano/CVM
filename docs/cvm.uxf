<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="13.3">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>434</x>
      <y>448</y>
      <w>287</w>
      <h>371</h>
    </coordinates>
    <panel_attributes>Object
--
FDeleter: void(*)(Object*)

__type_key: constexpr const char*_
__type_child_slots : constexpr uint32_t_
__type_child_slots_can_overflow : constexpr bool_
__type_has_method_sequal_reduce : constexpr bool_
__type_has_method_shash_reduce : constexpr bool_
__type_index : constexpr uint32_t_

type_index_: uint32_t
ref_counter_: RefCounterType
deleter_: FDeleter
--
Object()
Object(other: const Object&amp;)
Object(other: Object&amp;&amp;)
operator=(other: const Object&amp;) : Object&amp;
operator=(other: Object&amp;&amp;) : Object&amp;

type_index() const : uint32_t
GetTypeKey() const : string
GetTypeKeyHash() const : size_t

template&lt;typename TargetType&gt;
inline bool IsInstance() const;

inline unique() const : bool
_TypeIndex2Key(tindex: uint32_t) : string_
_TypeIndex2KeyHash(tindex: uint32_t) : size_t_
__GetOrAllocRuntimeTypeIndex() : uint32_t_
_RuntimeTypeIndex() : uint32_t_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1351</x>
      <y>168</y>
      <w>322</w>
      <h>182</h>
    </coordinates>
    <panel_attributes>TypeContext
--
- mutex_ : std::mutex
- type_counter_ : std::atomic&lt;uint32_t&gt;
- type_table_ : vector&lt;TypeInfo&gt;
- type_key2index_ : unordered_map&lt;string, uint32_t&gt;
--
_+ Global(): TypeContext*_
- TypeContext() &lt;&lt;constructor&gt;&gt;

+ DerivedFrom(uint32_t,uint32_t)
+ GetOrAllocRuntimeTypeIndex(const string&amp;,uint32_t,uint32_t,uint32_t,bool): uint32_t
+ TypeIndex2Key(uint32_t): string
+ TypeIndex2KeyHash(uint32_t_t) : size_t
+ TypeKey2Index(const string&amp;) : uint32_t
+ Dump(int): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1428</x>
      <y>0</y>
      <w>175</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>&lt;&lt;struct&gt;&gt;
TypeInfo
--
index: uint32_t
parent_index: uint32_t
num_slots: uint32_t
allocated_slots: uint32_t
child_slots_can_overflow: bool
name: string
name_hash: size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1505</x>
      <y>112</y>
      <w>21</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>777</x>
      <y>420</y>
      <w>287</w>
      <h>406</h>
    </coordinates>
    <panel_attributes>template=T
ObjectPtr (smart pinter)
/ref_counter定义在Object中，不同于普通smart_pointer/
--
- data_ : Object*
--
+ ObjectPtr()
+ ObjectPtr(nullptr_t)
+ ObjectPtr(const ObjectPtr&lt;T&gt;&amp;)
  &lt;U&gt;
+ ObjectPtr(const Object&lt;U&gt;&amp;)
+ ObjectPtr(ObjectPtr&lt;T&gt;&amp;&amp;)
 &lt;Y&gt;
+ ObjectPtr(ObjectPtr&lt;Y&gt;&amp;&amp;)
+ ~ObjectPtr()
- ObjectPtr(Object*) &lt;&lt;constructor from Object&gt;&gt;

+ swap(ObjectPtr&lt;T&gt;&amp;): void
+ get() const: T*
+ operator-&gt;() const: T*
+ operator*() const: T&amp;
+ operator=(const ObjectPtr&lt;T&gt;&amp;): ObjectPtr&lt;T&gt;&amp;
+ operator=(ObjectPtr&lt;T&gt;&amp;&amp;): ObjectPtr&lt;T&gt;&amp;
+ reset(): void
+ use_count(): int
+ unique(): bool
+ operator==(const ObjectPtr&lt;T&gt;&amp;): bool
+ operator!=(const ObjectPtr&lt;T&gt;&amp;): bool
+ operator==(nullptr_t): bool
+ operator!=(nullptr_t): bool
_- MoveFromRValueRefArg(Object**): ObjectPtr&lt;T&gt;_

&lt;friend&gt; Object
&lt;friend&gt; ObjectRef</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>714</x>
      <y>448</y>
      <w>77</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1120</x>
      <y>427</y>
      <w>224</w>
      <h>245</h>
    </coordinates>
    <panel_attributes>             ObjectRef (wrapper of ObjectPtr)
--
# data_: ObjectPtr&lt;Object&gt;
--
+ ObjectRef()
+ ObjectRef(ObjectPtr&lt;Object&gt;)
+ same_as(const ObjectRef&amp;)const: bool
+ operator==(const ObjectRef&amp;)const: bool
+ operator!=(const ObjectRef&amp;)const: bool
+ operator&lt;(const ObjectRef&amp;)const: bool
+ defined() const: bool
+ get() const: const Object*
+ operator-&gt;() const: const Object*
+ unique() const: bool
+ use_count() const: int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1050</x>
      <y>441</y>
      <w>84</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1890</x>
      <y>42</y>
      <w>280</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>template=Derived
ObjAllocatorBase
--
--
&lt;T, ...Args&gt;
+ make_object(Args&amp;&amp;...): ObjectPtr&lt;T&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1932</x>
      <y>315</y>
      <w>168</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>SimpleAllocator
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2002</x>
      <y>203</y>
      <w>252</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
public ObjAllocatorBase&lt;SimpleAllocator&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1946</x>
      <y>350</y>
      <w>21</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=-(+)
</panel_attributes>
    <additional_attributes>10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1750</x>
      <y>413</y>
      <w>252</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>template=T
Handler
--
--
&lt;...Args&gt;
_+ New(SimpleAllocator*, Args&amp;&amp;...) : T*_
_+ Deleter() : Object::FDeleter_
_- Deleter_() : void_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>721</y>
      <w>364</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>template=ArrayType, ElemType
InplaceArrayBase
--
--
~InplaceArrayBase()
+ operator[](size_t) const : const ElemType&amp;
+ operator[](size_t) const : ElemType&amp;
# &lt;typename... Args&gt; EmplaceInit(size_t, Args&amp;&amp;...) : void
# Self() const : ArrayType*
# AddressOf(size_t) const : void*
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>427</x>
      <y>945</y>
      <w>399</w>
      <h>315</h>
    </coordinates>
    <panel_attributes>ArrayNode
--
- size_: int64_t
- capacity_ : int64_t
_- kInitSize : constexpr int64_t_
_- kIncFactor : constexpr int64_t_

__type_index = TypeIndex::kRuntimeArray : constexpr const uint32_t_
__type_key = "Array" : constexpr const char*_
--
+ size() const : size_t
+ at(int64_t) const : const ObjectRef
+ begin() const : const ObjectRef*
+ end() const : const ObjectRef*
+ clear() : void
+ SetItem(ingt64_t, ObjectRef) : void
_+ CopyFrom(int64_t, ArrayNode*) : ObjectPtr&lt;ArrayNode&gt;_
_+ MoveFrom(int64_t, ArrayNode*) : ObjectPtr&lt;ArrayNode&gt;_
_+ CreateRepeated(int64_t, const ObjectRef&amp;) : ObjectPtr&lt;ArrayNode&gt;_
- GetSize() const : size_t
- MutableBegin() const : ObjectRef*
- MutableEnd() const : ObjectRef*
_- Empty(int64_t) : ObjectPtr&lt;ArrayNode&gt;_
- &lt;IterType&gt; InitRange(int64_t, IterType, IterType) : ArrayNode*
- MoveElementsLeft(int64_t, int64_t, int64_t) : ArrayNode*
- MoveElementsRight(int64_t, int64_t, int64_t) : ArrayNode*
- EnlargeBy(int64_t, const ObjectRef&amp;) : ArrayNode*
- ShrinkBy(int64_t) : ArrayNode*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>140</x>
      <y>833</y>
      <w>301</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
&lt;ArrayNode, ObjectRef&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;180.0;410.0;180.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>371</x>
      <y>448</y>
      <w>77</w>
      <h>525</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0;10.0;730.0;80.0;730.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>903</x>
      <y>931</y>
      <w>287</w>
      <h>329</h>
    </coordinates>
    <panel_attributes>template=T,enable_if
Array
--
--
+ Array()
+ Array(Array&lt;T&gt;&amp;&amp;)
+ Array(const Array&lt;T&gt;&amp;)
+ Array(ObjectPtr&lt;Object&gt;)
+ &lt;IterType&gt;Array(IterType, IterType)
+ Array(initializer_list&lt;T&gt;)
+ Array(cosnt vector&lt;T&gt;&amp;)
+ Array(const size_t, const T&amp;)
+ operator=(Array&lt;T&gt;&amp;&amp;)
+ operator=(cosnt Array&lt;T&gt;&amp;)

+ begin() const : iterator
+ end() const : iterator
+ rbegin() const : reverse_iterator
+ rend() const : reverse_iterator
+ opeator[](int64_t) const : const T
+ size() const : size_t
+ capacity() const : size_t
+ empty() const : bool
+ front() const : const T
+ GetArrayNode() const : ArrayNode*
+ &lt;IterType&gt; Assign(IterType, IterType) : void
+ CopyOnWrite() : ArrayNode*
- CopyOnWrite(int64_t) : ArrayNode*
- SwitchContainer(int64_t) : ArrayNode*
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1141</x>
      <y>665</y>
      <w>105</w>
      <h>301</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>130.0;10.0;130.0;410.0;10.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>819</x>
      <y>1295</y>
      <w>189</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>&lt;&lt;struct&gt;&gt;
ValueConverter
--
_convert(const ObjectRef&amp;) : T_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>910</x>
      <y>1253</y>
      <w>21</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=-(+)
</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1337</x>
      <y>630</y>
      <w>721</w>
      <h>882</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;1010.0;1240.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1925</x>
      <y>1498</y>
      <w>273</w>
      <h>238</h>
    </coordinates>
    <panel_attributes>NDArray
--
--
+ NDArray()
+ NDArray(ObjectPtr&lt;Object&gt;)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1855</x>
      <y>1764</y>
      <w>161</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>ContainerBase
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1946</x>
      <y>1729</y>
      <w>21</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=-(+)
</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2051</x>
      <y>1757</y>
      <w>161</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>Container
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2142</x>
      <y>1729</y>
      <w>21</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=-(+)
</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2653</x>
      <y>861</y>
      <w>385</w>
      <h>259</h>
    </coordinates>
    <panel_attributes>CVMPODValue_
--
# value_ : CVMValue
# type_code_ : int
--
+ operator double() const
+ operator int64_t() const
+ operator uint64_t() const
+ operator int() const
+ operator bool() const
+ operator void*() const
+ operator DLTensor*() const
+ operator NDArray() const

+ &lt;T&gt; T* ptr() const
+ type_code() const : int
&lt;TObjectRef, enable_if&lt;is_base_of&lt;ObjectRef, TObjectRef&gt;::value&gt;::type&gt;
+ IsObjectRef() const : bool
&lt;TObjectRef&gt;
+ AsObjectRef() const : TObjectRef
# CVMPODValue_() &lt;&lt;constructor&gt;&gt;
# CVMPODValue_(value: CVMValue, type_code: int)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2261</x>
      <y>1246</y>
      <w>357</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>CVMArgValue
--
--
+ CVMArgValue(value: CVMValue, type_code: int) &lt;&lt;constructor&gt;&gt;
+ operator std::string() const
+ operator PackedFunc() const
&lt;FType&gt;
+ operator TypedPackedFunc&lt;FType&gt;() const
+ value() const : const CVMValue&amp;
&lt;T, enable_if&lt;std::is_class&lt;T&gt;::value&gt;::type&gt;
+ operator T() const
+ operator DLDataType() const
+ operator DataType() const
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2429</x>
      <y>1113</y>
      <w>413</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>570.0;10.0;570.0;100.0;10.0;100.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3045</x>
      <y>1246</y>
      <w>378</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>CVMMovableArgValue_
--
--
+ CVMMovableArgValue_(value: CVMValue, type_code: int): &lt;&lt;constructor&gt;&gt;
+ operator std::string() const
+ operator PackedFunc() const
&lt;FType&gt;
+ TypedPackedFunc&lt;FType&gt;() const
+ DLDataType() const
+ DataType() const
+ CVMArgValue() const
&lt;T, enable_if&lt;is_base_of&lt;ObjectRef, T&gt;::value&gt;::type&gt;
+ operator T() const
- AsArgValue() const : CVMArgValue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2821</x>
      <y>1113</y>
      <w>385</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0;530.0;100.0;530.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3458</x>
      <y>1225</y>
      <w>434</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>CVMMovableArgValueWithContext_
--
- value_ : CVMMovableValue_
- optional_name : const string*
--
+ CVMMovableArgValueWithContext_(value: CVMValue, type_code: int, arg_index: int, optional_name: const string*)
&lt;T&gt;
+ operator T() const
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3416</x>
      <y>1246</y>
      <w>56</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2646</x>
      <y>1246</y>
      <w>392</w>
      <h>483</h>
    </coordinates>
    <panel_attributes>CVMRetValue
--
--
+ CVMRetValue()
+ CVMRetValue(CVMRetValue&amp;&amp;)
+ ~CVMRetValue()
+ operator std::string() const
+ operator DLDataType() const
+ operator DataType() const
+ operator PackedFunc() const
&lt;FType&gt;
+ TypedPackedFunc&lt;FType&gt; const
+ operator=(CVMRetValue&amp;&amp;) : CVMRetValue&amp;
+ operator=(double)                : CVMRetValue&amp;
+ operator=(nullptr_t)             : CVMREtValue&amp;
+ operator=(void*)                 : CVMRetValue&amp;
+ operator=(int64_t)               : CVMRetValue&amp;
+ operator=(int)                   : CVMRetValue&amp;
+ operator=(DLDevice)              : CVMRetValue&amp;
+ operator=(DLDataType)          : CVMRetValue&amp;
+ operator=(const DataType&amp;)  : CVMRetValue&amp;
+ operator=(bool)                  : CVMRetValue&amp;
+ operator=(string)                : CVMRetValue&amp;
+ operator=(CVMByteArray)          : CVMRetValue&amp;
+ operator=(NDArray)               : CVMRetValue&amp;
+ operator=(PackedFunc)            : CVMRetValue&amp;
&lt;FType&gt;
+ operator=(const TypedPackedFunc&lt;FType&gt;&amp;) : CVMRetValue&amp;
+ operator=(const CVMRetValue&amp;)    : CVMRetValue&amp;
+ operator=(CVMMovableArgValue&amp;&amp; other) : CVMRetValue&amp;
+ MoveToCHost(ret_value : CVMValue*, ret_type_code : int*) : void
_+ MoveFromCHost(value : CVMValue, type_code : int) : CVMRetValue_
&lt;TObjectRef, enable_if&lt;is_base_of&lt;ObjectRef, TObjectRef&gt;::value&gt;::type&gt;
+ CVMRetValue&amp; operator=(other: ObjectRef) : CVMRetValue&amp;
&lt;T, enable_if&lt;is_class&lt;T&gt;::value&gt;::type&gt;
+ operator T() const
&lt;T&gt;
- Assign(other: const T&amp;) : void
- SwitchTOPOD(type_code:int) : void
&lt;T&gt;
- SwitchToClass(type_code: int, V:T) : void
- SwitchToObject(type_code : int, other: ObjectPtr&lt;Object&gt;) : void
- Clear() : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2821</x>
      <y>1113</y>
      <w>21</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2261</x>
      <y>987</y>
      <w>350</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>CVMArgs
--
+ values : const CVMValue*
+ type_codes : const int *
+ num_args : int
--
+ CVMArgs(values: const CVMValue*, type_codes: const int*, num_args:int)
+ size() const: int
+ operator[](i: int) const : CVMArgValue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3472</x>
      <y>770</y>
      <w>511</w>
      <h>308</h>
    </coordinates>
    <panel_attributes>template=R,Args...
TypedPackedFunc
--
- packed_ : PackedFunc
--
+ TypedPackedFunc()
+ TypedPackedFunc(nullptr)
+ TypedPackedFunc(packed: PackedFunc)
+ TypedPackedFunc(value: const CVMRetValue&amp;)
+ TypedPackedFunc(value: const CVMArgValue&amp;)
+ TypedPackedFunc(value: CVMMovableArgValueWithContext_&amp;&amp;)
&lt;FLambda, enable_if&lt;is_convertible&lt;FLambda, function&lt;R(Args...)&gt;&gt;::value&gt;::type&gt;
+ TypedPackedFunc(typed_lambda: const FLambda&amp;, name: string)
&lt;FLambda, enable_if&lt;is_convertible&lt;FLambda, function&lt;R(Args...)&gt;&gt;::type&gt;
+ TypedPackedFunc(typed_lambda: const FLmabda&amp;)
&lt;FLambda, enable_if&lt;is_convertible&lt;FLambda, function&lt;R(Args...)&gt;&gt;::value&gt;::type&gt;
+ TypedPackedFunc(typed_lambda: const FLambda&amp;)
&lt;FLambda, enable_if&lt;is_convertible&lt;FLambda, function&lt;R(Args...)&gt;&gt;::value&gt;::type&gt;
+ operator=(typed_lambda: FLambda) : TSelf&amp;
+ operator=(packed: PackedFunc) : TSelf&amp;
+ operator()(Args...) const : R
+ operator PackedFunc() const
+ packed() const : const PackedFunc&amp;
&lt;FLambda&gt;
- AssignTypedLambda(flambda: FLambda, name: string) : void
&lt;FLambda&gt;
- AssignTypedLambda(flambda: FLambda) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3612</x>
      <y>714</y>
      <w>175</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>template=FType
TypedPackedFunc</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3682</x>
      <y>742</y>
      <w>21</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3087</x>
      <y>805</y>
      <w>350</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>PackedFunc
--
- body_ : FType
--
+ PackedFunc()
+ PackedFunc(nullptr_t)
+ PackedFunc(body: FType)
&lt;Args...&gt;
+ operator()(Args&amp;&amp;...) const : CVMRetValue
+ CallPacked(args: CVMArgs, rv: CVMRetValue*) const : void
+ body() const : FType
+ operator==(nullptr_t) : bool
+ operator!=(nullptr_t) : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3430</x>
      <y>805</y>
      <w>56</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2450</x>
      <y>686</y>
      <w>182</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>&lt;&lt;union&gt;&gt;
CVMValue
--
v_int64:   int64_t
v_float64: double
v_handle:  void*
v_str:        const char*
v_type:    DLDataType
v_device: DLDevice</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2534</x>
      <y>784</y>
      <w>133</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;150.0;170.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2422</x>
      <y>784</y>
      <w>133</w>
      <h>217</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>170.0;10.0;170.0;150.0;10.0;150.0;10.0;290.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2240</x>
      <y>784</y>
      <w>315</w>
      <h>497</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>430.0;10.0;430.0;150.0;10.0;150.0;10.0;690.0;30.0;690.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2534</x>
      <y>784</y>
      <w>126</w>
      <h>812</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;150.0;130.0;150.0;130.0;1140.0;160.0;1140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2212</x>
      <y>1442</y>
      <w>399</w>
      <h>308</h>
    </coordinates>
    <panel_attributes>CVMArgsSetter
--
- values_ : CVMValue*
- type_codes_ : int*
--
+ CVMArgsSetter(values: CVMValue*, type_codes: int*)
&lt;T, enable_if&lt;is_integral&lt;T&gt;::value&gt;::type&gt;
+ operator()(i: size_t, value: T) const: void
+ operator()(i: size_t, value: uint64_t) const : void
+ operator()(i: size_t, value: double) const : void
+ operator()(i: size_t, value: nullptr_t) const : void
+ operator()(i: size_t, value: const CVMArgValue&amp;) const : void
+ operator()(i: size_t, value: void*) const : void
+ operator()(i: size_t, value: DLTensor*) const : void
+ operator()(i: size_t, value: Device) const : void
+ operator()(i: size_t, value: DLDataType) const : void
+ operator()(i: size_t, value: const char*) const : void
+ operator()(i: size_t, value: const string&amp;) const : void
+ operator()(i: size_t, value: const CVMByteArray&amp;) const : void
+ operator()(i: size_t, value: const PackedFunc&amp;) const : void
&lt;FType&gt;
+ operator()(i: size_t, value: const TypedPackedFunc&lt;FType&gt;&amp;) const : void
+ operator()(i: size_t, value: const CVMRetValue&amp;) const : void
&lt;TObjectRef,enable_if&lt;is_base_of&lt;ObjectRef, remove_reference&lt;TObjectRef&gt;::type&gt;::value&gt;::type&gt;
+ operator()(i: size_t, value: TObjectRef&amp;) const : void
&lt;TobjectRef&gt;
- SetObjectRef(i: size_t, value: TObjectRef&amp;&amp;) const : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2163</x>
      <y>973</y>
      <w>504</w>
      <h>539</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;750.0;60.0;10.0;700.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2163</x>
      <y>1421</y>
      <w>497</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;110.0;40.0;10.0;670.0;10.0;690.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>371</x>
      <y>448</y>
      <w>84</w>
      <h>959</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0;10.0;1350.0;100.0;1350.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>441</x>
      <y>1379</y>
      <w>392</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>StringObj
--
+ data : cosnt char*
+ size : uint64_t
_+ _type_index: constexpr const uint32_t=TypeIndex::kRuntimeString_
_+ _type_key: constexpr const char*="runtime.String"_
--
--
*CVM_DECLARE_FINAL_OBJECT_INFO(StringObj, Object)*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>476</x>
      <y>1463</y>
      <w>21</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=-(+)
</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>392</x>
      <y>1505</y>
      <w>168</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>FromStd
--
- data_container : string
--
+ FromStd(other:string)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>441</x>
      <y>1463</y>
      <w>21</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>875</x>
      <y>1379</y>
      <w>322</w>
      <h>259</h>
    </coordinates>
    <panel_attributes>String
--
--
+ String()
+ String(other: string)
+ String(other: const char*)
+ operator=(other: string) : String&amp;
+ operator=(other: const char*) : String&amp;
+ compare(other: const String&amp;) const : int
+ compare(other: const std::string&amp;) const : int
+ c_str() const : const char*
+ size() const : size_t
+ length() const : size_t
+ empty() const : bool
+ at(pos: size_t) const : char
+ data() const : const char*
+ operator std::string() const
+ operator llvm::StringRef() const
_+ CanConvertFrom(val: const CVMArgValue&amp;) : bool_
_+ HashBytes(data: const char*, size: size_t) : size_t_
_- memncmp(lhs: const char*, rhs: const char*, lhs_count: size_t, rhs_count: size_t)
_- Concat(lhs: const char*, lhs_size: size_t, rhs: const char*, rhs_size: size_t_
--
*CVM_DEFINE_NOTNULLABLE_OBJECT_REF_METHOD(String, ObjectRef, StringObj)*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1190</x>
      <y>665</y>
      <w>56</w>
      <h>735</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;60.0;1030.0;10.0;1030.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1274</x>
      <y>931</y>
      <w>287</w>
      <h>343</h>
    </coordinates>
    <panel_attributes>template=T
Optional
--
_+ _type_is_nullable : constexpr bool_
--
+ Optional()
+ Optional(const Optional&lt;T&gt;&amp;)
+ Optional(Optional&lt;T&gt;&amp;&amp;)
+ operator=(const Optional&lt;T&gt;&amp;) : Optional&lt;T&gt;&amp;
+ operator=(Optional&lt;T&gt;&amp;&amp;) : Optional&lt;T&gt;&amp;
+ Optional(ptr:ObjectPtr&lt;T&gt;)
+ Optional(NullOptType)
+ Optional(nullptr_t)
+ operator=(nullptr_t)
+ Optional(other: T)
+ operator=(other: T): Optional&lt;T&gt;&amp;
+ Optional(val: int) = delete
+ operator(val: int) = delete
+ value() const : T
+ value_or(default_value: T) : T
+ operator bool() const
+ operator==(nullptr_t) const
+ operator!=(nullptr_t) const
+ operator==(other: const Optional&lt;T&gt;&amp;) const
+ operator!=(other: const Optional&lt;T&gt;&amp;) const
+ operator==(other: const T&amp;) const : auto
+ operator!=(other: const T&amp;) const : auto
&lt;U&gt;
+ operator==(other: const U&amp;) const : auto
&lt;U&gt;
+ operator!=(other: const U&amp;) const : auto</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1225</x>
      <y>665</y>
      <w>63</w>
      <h>301</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;410.0;70.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>847</x>
      <y>1708</y>
      <w>364</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Closure
--
--
--
*CVM_DEFINE_OBJECT_REF_METHOD(Closure, ObjectRef, ClosureObj)*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>462</x>
      <y>1701</y>
      <w>301</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>ClosureObj
--
+ _type_index : TypeIndex::kRuntimeClosure
+ _type_key : "runtime.Closure"
--
--
*CVM_DECLARE_BASE_OBJECT_INFO(ClosureObj, Object)*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1204</x>
      <y>665</y>
      <w>42</w>
      <h>1071</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>40.0;10.0;40.0;1510.0;10.0;1510.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>371</x>
      <y>448</y>
      <w>105</w>
      <h>1274</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0;10.0;1800.0;130.0;1800.0</additional_attributes>
  </element>
</diagram>

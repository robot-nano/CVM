<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="13.3">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>441</x>
      <y>448</y>
      <w>280</w>
      <h>371</h>
    </coordinates>
    <panel_attributes>Object
--
FDeleter: void(*)(Object*)

__type_key: constexpr const char*_
__type_child_slots : constexpr uint32_t_
__type_child_slots_can_overflow : constexpr bool_
__type_has_method_sequal_reduce : constexpr bool_
__type_has_method_shash_reduce : constexpr bool_
__type_index : constexpr uint32_t_

type_index_: uint32_t
ref_counter_: RefCounterType
deleter_: FDeleter
--
Object()
Object(other: const Object&amp;)
Object(other: Object&amp;&amp;)
operator=(other: const Object&amp;) : Object&amp;
operator=(other: Object&amp;&amp;) : Object&amp;

type_index() const : uint32_t
GetTypeKey() const : string
GetTypeKeyHash() const : size_t

template&lt;typename TargetType&gt;
inline bool IsInstance() const;

inline unique() const : bool
_TypeIndex2Key(tindex: uint32_t) : string_
_TypeIndex2KeyHash(tindex: uint32_t) : size_t_
__GetOrAllocRuntimeTypeIndex() : uint32_t_
_RuntimeTypeIndex() : uint32_t_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1358</x>
      <y>168</y>
      <w>322</w>
      <h>182</h>
    </coordinates>
    <panel_attributes>TypeContext
--
- mutex_ : std::mutex
- type_counter_ : std::atomic&lt;uint32_t&gt;
- type_table_ : vector&lt;TypeInfo&gt;
- type_key2index_ : unordered_map&lt;string, uint32_t&gt;
--
_+ Global(): TypeContext*_
- TypeContext() &lt;&lt;constructor&gt;&gt;

+ DerivedFrom(uint32_t,uint32_t)
+ GetOrAllocRuntimeTypeIndex(const string&amp;,uint32_t,uint32_t,uint32_t,bool): uint32_t
+ TypeIndex2Key(uint32_t): string
+ TypeIndex2KeyHash(uint32_t_t) : size_t
+ TypeKey2Index(const string&amp;) : uint32_t
+ Dump(int): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1435</x>
      <y>0</y>
      <w>175</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>&lt;&lt;struct&gt;&gt;
TypeInfo
--
index: uint32_t
parent_index: uint32_t
num_slots: uint32_t
allocated_slots: uint32_t
child_slots_can_overflow: bool
name: string
name_hash: size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1512</x>
      <y>112</y>
      <w>21</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>819</x>
      <y>420</y>
      <w>287</w>
      <h>406</h>
    </coordinates>
    <panel_attributes>template=T
ObjectPtr (smart pinter)
/ref_counter定义在Object中，不同于普通smart_pointer/
--
- data_ : Object*
--
+ ObjectPtr()
+ ObjectPtr(nullptr_t)
+ ObjectPtr(const ObjectPtr&lt;T&gt;&amp;)
  &lt;U&gt;
+ ObjectPtr(const Object&lt;U&gt;&amp;)
+ ObjectPtr(ObjectPtr&lt;T&gt;&amp;&amp;)
 &lt;Y&gt;
+ ObjectPtr(ObjectPtr&lt;Y&gt;&amp;&amp;)
+ ~ObjectPtr()
- ObjectPtr(Object*) &lt;&lt;constructor from Object&gt;&gt;

+ swap(ObjectPtr&lt;T&gt;&amp;): void
+ get() const: T*
+ operator-&gt;() const: T*
+ operator*() const: T&amp;
+ operator=(const ObjectPtr&lt;T&gt;&amp;): ObjectPtr&lt;T&gt;&amp;
+ operator=(ObjectPtr&lt;T&gt;&amp;&amp;): ObjectPtr&lt;T&gt;&amp;
+ reset(): void
+ use_count(): int
+ unique(): bool
+ operator==(const ObjectPtr&lt;T&gt;&amp;): bool
+ operator!=(const ObjectPtr&lt;T&gt;&amp;): bool
+ operator==(nullptr_t): bool
+ operator!=(nullptr_t): bool
_- MoveFromRValueRefArg(Object**): ObjectPtr&lt;T&gt;_

&lt;friend&gt; Object
&lt;friend&gt; ObjectRef</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>714</x>
      <y>448</y>
      <w>119</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;150.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1204</x>
      <y>427</y>
      <w>224</w>
      <h>245</h>
    </coordinates>
    <panel_attributes>             ObjectRef (wrapper of ObjectPtr)
--
# data_: ObjectPtr&lt;Object&gt;
--
+ ObjectRef()
+ ObjectRef(ObjectPtr&lt;Object&gt;)
+ same_as(const ObjectRef&amp;)const: bool
+ operator==(const ObjectRef&amp;)const: bool
+ operator!=(const ObjectRef&amp;)const: bool
+ operator&lt;(const ObjectRef&amp;)const: bool
+ defined() const: bool
+ get() const: const Object*
+ operator-&gt;() const: const Object*
+ unique() const: bool
+ use_count() const: int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1085</x>
      <y>441</y>
      <w>133</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1897</x>
      <y>42</y>
      <w>280</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>template=Derived
ObjAllocatorBase
--
--
&lt;T, ...Args&gt;
+ make_object(Args&amp;&amp;...): ObjectPtr&lt;T&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1939</x>
      <y>315</y>
      <w>168</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>SimpleAllocator
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2009</x>
      <y>203</y>
      <w>231</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
public ObjAllocatorBase&lt;SimpleAllocator&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1953</x>
      <y>350</y>
      <w>21</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=-(+)
</panel_attributes>
    <additional_attributes>10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1757</x>
      <y>413</y>
      <w>252</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>template=T
Handler
--
--
&lt;...Args&gt;
_+ New(SimpleAllocator*, Args&amp;&amp;...) : T*_
_+ Deleter() : Object::FDeleter_
_- Deleter_() : void_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>791</y>
      <w>371</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>template=ArrayType, ElemType
InplaceArrayBase
--
--
~InplaceArrayBase()
+ operator[](size_t) const : const ElemType&amp;
+ operator[](size_t) const : ElemType&amp;
# &lt;typename... Args&gt; EmplaceInit(size_t, Args&amp;&amp;...) : void
# Self() const : ArrayType*
# AddressOf(size_t) const : void*
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>322</x>
      <y>1001</y>
      <w>385</w>
      <h>308</h>
    </coordinates>
    <panel_attributes>ArrayNode
--
- size_: int64_t
- capacity_ : int64_t
_- kInitSize : constexpr int64_t_
_- kIncFactor : constexpr int64_t_

__type_index = TypeIndex::kRuntimeArray : constexpr const uint32_t_
__type_key = "Array" : constexpr const char*_
--
+ size() const : size_t
+ at(int64_t) const : const ObjectRef
+ begin() const : const ObjectRef*
+ end() const : const ObjectRef*
+ clear() : void
+ SetItem(ingt64_t, ObjectRef) : void
_+ CopyFrom(int64_t, ArrayNode*) : ObjectPtr&lt;ArrayNode&gt;_
_+ MoveFrom(int64_t, ArrayNode*) : ObjectPtr&lt;ArrayNode&gt;_
_+ CreateRepeated(int64_t, const ObjectRef&amp;) : ObjectPtr&lt;ArrayNode&gt;_
- GetSize() const : size_t
- MutableBegin() const : ObjectRef*
- MutableEnd() const : ObjectRef*
_- Empty(int64_t) : ObjectPtr&lt;ArrayNode&gt;_
- &lt;IterType&gt; InitRange(int64_t, IterType, IterType) : ArrayNode*
- MoveElementsLeft(int64_t, int64_t, int64_t) : ArrayNode*
- MoveElementsRight(int64_t, int64_t, int64_t) : ArrayNode*
- EnlargeBy(int64_t, const ObjectRef&amp;) : ArrayNode*
- ShrinkBy(int64_t) : ArrayNode*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>140</x>
      <y>903</y>
      <w>441</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
&lt;ArrayNode, ObjectRef&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0;610.0;80.0;610.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>812</y>
      <w>21</w>
      <h>203</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;270.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1190</x>
      <y>994</y>
      <w>280</w>
      <h>329</h>
    </coordinates>
    <panel_attributes>template=T,enable_if
Array
--
--
+ Array()
+ Array(Array&lt;T&gt;&amp;&amp;)
+ Array(const Array&lt;T&gt;&amp;)
+ Array(ObjectPtr&lt;Object&gt;)
+ &lt;IterType&gt;Array(IterType, IterType)
+ Array(initializer_list&lt;T&gt;)
+ Array(cosnt vector&lt;T&gt;&amp;)
+ Array(const size_t, const T&amp;)
+ operator=(Array&lt;T&gt;&amp;&amp;)
+ operator=(cosnt Array&lt;T&gt;&amp;)

+ begin() const : iterator
+ end() const : iterator
+ rbegin() const : reverse_iterator
+ rend() const : reverse_iterator
+ opeator[](int64_t) const : const T
+ size() const : size_t
+ capacity() const : size_t
+ empty() const : bool
+ front() const : const T
+ GetArrayNode() const : ArrayNode*
+ &lt;IterType&gt; Assign(IterType, IterType) : void
+ CopyOnWrite() : ArrayNode*
- CopyOnWrite(int64_t) : ArrayNode*
- SwitchContainer(int64_t) : ArrayNode*
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1421</x>
      <y>427</y>
      <w>105</w>
      <h>602</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0;130.0;840.0;20.0;840.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1155</x>
      <y>1351</y>
      <w>161</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>&lt;&lt;struct&gt;&gt;
ValueConverter
--
_convert(const ObjectRef&amp;) : T_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1246</x>
      <y>1316</y>
      <w>21</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=-(+)
</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1421</x>
      <y>427</y>
      <w>105</w>
      <h>1106</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0;130.0;1560.0;60.0;1560.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1190</x>
      <y>1505</y>
      <w>273</w>
      <h>238</h>
    </coordinates>
    <panel_attributes>NDArray
--
--
+ NDArray()
+ NDArray(ObjectPtr&lt;Object&gt;)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1120</x>
      <y>1778</y>
      <w>161</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>ContainerBase
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1211</x>
      <y>1736</y>
      <w>21</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=-(+)
</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1127</x>
      <y>1897</y>
      <w>161</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>Container
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1218</x>
      <y>1855</y>
      <w>21</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=-(+)
</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
